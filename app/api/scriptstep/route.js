// Route API Next.js pour g√©n√©rer chaque √©tape d'un script conversationnel OF
import { NextResponse } from "next/server";

export async function POST(req) {
  // Ajout soustraction cr√©dits utilisateur
  const { getServerSession } = require("next-auth");
  const dbConnect = require("@/lib/mongoose").default;
  const User = require("@/models/User").default;
  const { authOptions } = require("../auth/[...nextauth]/route");
  await dbConnect();
  const session = await getServerSession(authOptions);
  if (!session || !session.user || !session.user.email) {
    return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
  }
  const dbUser = await User.findOne({ email: session.user.email });
  if (!dbUser) {
    return NextResponse.json({ error: "Utilisateur introuvable" }, { status: 403 });
  }
  const body = await req.json();
  const { objectif, historique, etape, totalEtapes, instructions, tone, pseudo } = body;
  // Prompt dynamique pour Grok
  let dernierFan = "";
  if (historique && historique.length > 0) {
    dernierFan = historique[historique.length - 1]?.abonne || "";
  }
  const prompt = `
Tu es une mod√®le OnlyFans. Ta mission est de r√©pondre √† ton abonn√© dans le contexte d'une conversation, √† la premi√®re personne, sans aucune explication, sans introduction, sans reformulation de la consigne. Ta r√©ponse doit √™tre directement copiable/collable comme message du mod√®le.

Exemple :
Fan : Salut beaut√© !
Mod√®le : Coucou toi üòò, comment tu vas ?

Fan : Je veux voir plus de photos.
Mod√®le : Je peux t'envoyer des photos priv√©es, tu veux voir quoi en particulier ?

G√©n√®re chaque r√©ponse avec un style unique. Change la construction, la longueur, le rythme et les expressions utilis√©es. Pas deux phrases identiques. Varie le style et le niveau d‚Äôintensit√©.
Tu es une mod√®le OnlyFans, jeune, sexy, expressive, confiante, un peu taquine, parfois crue quand il faut. Tu parles comme une vraie fille en train de discuter sur Insta ou WhatsApp, pas comme une r√©dactrice IA. Tes messages peuvent contenir des fautes naturelles, des expressions courtes, des soupirs ou des bruits naturels ("hmm", "rawr", "tu vois ?", etc.).
Tu peux utiliser des √©mojis mais pense √† les varier et les adapter √† ton message mais jamais plus de deux trois √† la suite. Pour les ponctuations √©vite les exclamtions et les virgules excessives (maximum une virgule par r√©ponse sinon aucune m√™me si le sens de la phrase le demande)

Objectif du script : ${objectif}
${tone ? `Ton √† adopter : ${tone}` : ""}
${pseudo ? `Nom ou pseudo du mod√®le : ${pseudo}` : ""}
${typeof totalEtapes !== 'undefined' ? `Nombre d'√©tapes : ${totalEtapes}` : ""}
Voici l'historique de la conversation (JSON) :
${JSON.stringify(historique, null, 2)}
Dernier message du fan : ${dernierFan}
${instructions && instructions.trim() ? `\nInformation importante √† prendre en compte : ${instructions.trim()}` : ""}

G√©n√®re UNIQUEMENT la r√©plique du mod√®le${typeof etape !== 'undefined' ? ` pour l'√©tape ${etape}` : ""}, √† la premi√®re personne, sans explication ni raisonnement, sans pr√©ambule. R√©ponds comme si tu √©tais le mod√®le, pr√™t √† envoyer le message au fan.
`;
  // DEBUG : log du prompt envoy√©
  console.log("[SCRIPTSTEP][Prompt envoy√©]", prompt);

  const grokRes = await fetch("https://api.x.ai/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${process.env.XAI_API_KEY}`
    },
    body: JSON.stringify({
      model: "grok-3-mini",
      messages: [
        { role: "system", content: "Tu es une mod√®le OnlyFans qui discute avec ses abonn√©s et g√©n√®re des r√©pliques naturelles et directes, sans formulation ni explication." },
        { role: "user", content: prompt }
      ],
      max_tokens: 1000,
      temperature: 0.7
    })
  });
  const data = await grokRes.json();
  //console.log("[GROK API] data:", data);
  const messageObj = data.choices?.[0]?.message;
  console.log("[GROK API] messageObj:", messageObj);
  let text = messageObj?.content || "";
  if (!text && messageObj?.reasoning_content) {
    text = messageObj.reasoning_content;
  }
  // Nettoyage : retire tout sauf la r√©plique du mod√®le
  // D√©duction des cr√©dits (1 cr√©dit = 100 tokens, arrondi sup√©rieur)
  let tokensUsed = 0;
  if (data.usage) {
    tokensUsed = data.usage.total_tokens || 0;
  }
  const creditsToDeduct = Math.ceil(tokensUsed / 100);
  if (dbUser.credits < creditsToDeduct) {
    return NextResponse.json({ error: "Cr√©dits insuffisants" }, { status: 402 });
  }
  dbUser.credits -= creditsToDeduct;
  try {
    await dbUser.save();
  } catch (err) {
    return NextResponse.json({ error: "Erreur lors de la sauvegarde de l'utilisateur", details: err.message }, { status: 500 });
  }
  const reponse = text.split('\n').find(l => l.trim().length > 0) || text;
  return NextResponse.json({ reponse, creditsLeft: dbUser.credits });
}
